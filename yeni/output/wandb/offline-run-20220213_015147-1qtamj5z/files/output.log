Train Mode
[32m2022-02-13 01:51:52.367[39m | [1mINFO[22m | [90m/home/avsp/Masa√ºst√º/GansNRoses/GansNRoses/environment/level_utils.py:76[39m | Tokens in level ['-', 'R', 'T']
init map tensor([[[[1., 1., 0., 0.],
          [0., 1., 1., 0.],
          [0., 0., 1., 0.],
          [1., 0., 1., 0.]],
         [[0., 0., 0., 1.],
          [1., 0., 0., 0.],
          [1., 0., 0., 1.],
          [0., 1., 0., 1.]],
         [[0., 0., 1., 0.],
          [0., 0., 0., 1.],
          [0., 1., 0., 0.],
          [0., 0., 0., 0.]]]])
fake tensor([[[[0.3474, 0.3584, 0.3753, 0.3478],
          [0.3324, 0.4253, 0.3274, 0.3021],
          [0.2864, 0.3808, 0.3192, 0.3123],
          [0.2760, 0.3204, 0.3253, 0.2938]],
         [[0.2896, 0.2999, 0.2462, 0.3057],
          [0.3079, 0.2599, 0.3216, 0.3051],
          [0.3046, 0.2997, 0.3198, 0.2938],
          [0.3358, 0.3147, 0.2862, 0.3152]],
         [[0.3630, 0.3417, 0.3785, 0.3465],
          [0.3597, 0.3148, 0.3510, 0.3928],
          [0.4090, 0.3195, 0.3610, 0.3939],
          [0.3883, 0.3649, 0.3885, 0.3910]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T-T-\n', 'T-TT\n', 'T-TT\n', 'TTTT']
prize_locations []
trap_locations [[0, 0], [0, 2], [1, 0], [1, 2], [1, 3], [2, 0], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]
matrix_map [[[0. 1. 0. 1.]
  [0. 1. 0. 0.]
  [0. 1. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 1. 0.]
  [1. 0. 1. 1.]
  [1. 0. 1. 1.]
  [1. 1. 1. 1.]]]
fake tensor([[[[0.3353, 0.2372, 0.2989, 0.3307],
          [0.2988, 0.4296, 0.3364, 0.3642],
          [0.3243, 0.3588, 0.3058, 0.4082],
          [0.3089, 0.3643, 0.4061, 0.2583]],
         [[0.2984, 0.3348, 0.3192, 0.3199],
          [0.3286, 0.2784, 0.3088, 0.2936],
          [0.3047, 0.3008, 0.3206, 0.2384],
          [0.3233, 0.2649, 0.2542, 0.3469]],
         [[0.3663, 0.4281, 0.3818, 0.3494],
          [0.3726, 0.2921, 0.3548, 0.3422],
          [0.3711, 0.3405, 0.3737, 0.3534],
          [0.3677, 0.3707, 0.3397, 0.3948]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTTT\n', 'T-T-\n', 'T-T-\n', 'TT-T']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 2], [2, 0], [2, 2], [3, 0], [3, 1], [3, 3]]
matrix_map [[[0. 0. 0. 0.]
  [0. 1. 0. 1.]
  [0. 1. 0. 1.]
  [0. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 1.]
  [1. 0. 1. 0.]
  [1. 0. 1. 0.]
  [1. 1. 0. 1.]]]
fake tensor([[[[0.3636, 0.2810, 0.3265, 0.2649],
          [0.3082, 0.3597, 0.3071, 0.3459],
          [0.2675, 0.3332, 0.4229, 0.3261],
          [0.3888, 0.4180, 0.3574, 0.2923]],
         [[0.2955, 0.3107, 0.3143, 0.3173],
          [0.3091, 0.2964, 0.3117, 0.3153],
          [0.3456, 0.2992, 0.2337, 0.2924],
          [0.2593, 0.2775, 0.3058, 0.3161]],
         [[0.3409, 0.4083, 0.3593, 0.4178],
          [0.3827, 0.3439, 0.3812, 0.3388],
          [0.3870, 0.3675, 0.3435, 0.3814],
          [0.3519, 0.3045, 0.3368, 0.3915]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['-TTT\n', 'T-T-\n', 'TT-T\n', '---T']
prize_locations []
trap_locations [[0, 1], [0, 2], [0, 3], [1, 0], [1, 2], [2, 0], [2, 1], [2, 3], [3, 3]]
matrix_map [[[1. 0. 0. 0.]
  [0. 1. 0. 1.]
  [0. 0. 1. 0.]
  [1. 1. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 1. 1.]
  [1. 0. 1. 0.]
  [1. 1. 0. 1.]
  [0. 0. 0. 1.]]]
fake tensor([[[[0.2988, 0.4201, 0.3380, 0.3290],
          [0.3305, 0.3430, 0.3516, 0.4225],
          [0.3146, 0.2805, 0.3066, 0.2965],
          [0.3160, 0.2826, 0.3068, 0.3826]],
         [[0.2902, 0.2541, 0.2804, 0.3070],
          [0.2860, 0.3199, 0.3162, 0.2770],
          [0.3202, 0.3274, 0.3096, 0.2730],
          [0.3111, 0.3313, 0.3242, 0.2897]],
         [[0.4111, 0.3258, 0.3817, 0.3641],
          [0.3835, 0.3371, 0.3322, 0.3005],
          [0.3651, 0.3921, 0.3839, 0.4305],
          [0.3729, 0.3861, 0.3690, 0.3277]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T-TT\n', 'T---\n', 'TTTT\n', 'TTT-']
prize_locations []
trap_locations [[0, 0], [0, 2], [0, 3], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2]]
matrix_map [[[0. 1. 0. 0.]
  [0. 1. 1. 1.]
  [0. 0. 0. 0.]
  [0. 0. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 1. 1.]
  [1. 0. 0. 0.]
  [1. 1. 1. 1.]
  [1. 1. 1. 0.]]]
fake tensor([[[[0.2974, 0.3398, 0.2775, 0.4560],
          [0.3100, 0.3291, 0.2974, 0.3767],
          [0.2539, 0.3093, 0.3818, 0.3517],
          [0.3033, 0.3221, 0.3901, 0.3368]],
         [[0.2921, 0.3033, 0.3367, 0.2448],
          [0.3117, 0.3085, 0.3193, 0.2637],
          [0.3564, 0.3128, 0.2579, 0.2827],
          [0.3111, 0.3109, 0.3036, 0.3134]],
         [[0.4105, 0.3569, 0.3858, 0.2992],
          [0.3783, 0.3624, 0.3833, 0.3596],
          [0.3898, 0.3779, 0.3602, 0.3656],
          [0.3855, 0.3669, 0.3063, 0.3498]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTT-\n', 'TTT-\n', 'TT-T\n', 'TT-T']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 3], [3, 0], [3, 1], [3, 3]]
matrix_map [[[0. 0. 0. 1.]
  [0. 0. 0. 1.]
  [0. 0. 1. 0.]
  [0. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 0.]
  [1. 1. 1. 0.]
  [1. 1. 0. 1.]
  [1. 1. 0. 1.]]]
fake tensor([[[[0.2946, 0.3766, 0.3911, 0.2970],
          [0.3472, 0.2919, 0.3215, 0.3365],
          [0.2864, 0.2491, 0.2891, 0.4000],
          [0.3882, 0.3309, 0.4322, 0.3062]],
         [[0.3089, 0.2876, 0.3019, 0.2887],
          [0.3210, 0.3257, 0.3029, 0.3203],
          [0.3407, 0.3486, 0.3336, 0.2794],
          [0.2330, 0.2839, 0.2181, 0.3279]],
         [[0.3965, 0.3358, 0.3071, 0.4143],
          [0.3318, 0.3824, 0.3756, 0.3433],
          [0.3728, 0.4023, 0.3773, 0.3206],
          [0.3788, 0.3852, 0.3498, 0.3660]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T--T\n', '-TTT\n', 'TTT-\n', '-T-T']
prize_locations []
trap_locations [[0, 0], [0, 3], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [3, 1], [3, 3]]
matrix_map [[[0. 1. 1. 0.]
  [1. 0. 0. 0.]
  [0. 0. 0. 1.]
  [1. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 0. 1.]
  [0. 1. 1. 1.]
  [1. 1. 1. 0.]
  [0. 1. 0. 1.]]]
fake tensor([[[[0.3394, 0.3329, 0.3907, 0.3975],
          [0.3162, 0.3628, 0.3734, 0.2756],
          [0.2481, 0.3170, 0.3144, 0.4247],
          [0.2782, 0.2929, 0.2968, 0.3811]],
         [[0.2989, 0.2882, 0.2862, 0.3039],
          [0.2956, 0.3138, 0.2751, 0.3416],
          [0.3327, 0.3097, 0.3110, 0.2376],
          [0.3121, 0.3093, 0.3251, 0.2503]],
         [[0.3616, 0.3790, 0.3231, 0.2985],
          [0.3883, 0.3234, 0.3515, 0.3828],
          [0.4192, 0.3733, 0.3746, 0.3377],
          [0.4097, 0.3977, 0.3781, 0.3686]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT--\n', 'T--T\n', 'TTT-\n', 'TTT-']
prize_locations []
trap_locations [[0, 0], [0, 1], [1, 0], [1, 3], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2]]
matrix_map [[[0. 0. 1. 1.]
  [0. 1. 1. 0.]
  [0. 0. 0. 1.]
  [0. 0. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 0.]
  [1. 0. 0. 1.]
  [1. 1. 1. 0.]
  [1. 1. 1. 0.]]]
fake tensor([[[[0.3670, 0.3433, 0.3947, 0.3526],
          [0.3033, 0.2856, 0.4538, 0.2626],
          [0.3349, 0.3102, 0.3435, 0.2600],
          [0.4070, 0.2985, 0.3177, 0.3000]],
         [[0.2491, 0.2882, 0.2363, 0.3182],
          [0.3087, 0.3486, 0.2413, 0.3271],
          [0.3076, 0.3201, 0.3097, 0.3520],
          [0.3037, 0.3122, 0.3158, 0.2814]],
         [[0.3839, 0.3685, 0.3690, 0.3292],
          [0.3879, 0.3659, 0.3050, 0.4103],
          [0.3576, 0.3697, 0.3468, 0.3881],
          [0.2893, 0.3893, 0.3665, 0.4186]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT--\n', 'TT-T\n', 'TTTT\n', '-TTT']
prize_locations []
trap_locations [[0, 0], [0, 1], [1, 0], [1, 1], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]
matrix_map [[[0. 0. 1. 1.]
  [0. 0. 1. 0.]
  [0. 0. 0. 0.]
  [1. 0. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 0.]
  [1. 1. 0. 1.]
  [1. 1. 1. 1.]
  [0. 1. 1. 1.]]]
fake tensor([[[[0.4023, 0.3226, 0.3741, 0.2843],
          [0.3025, 0.2850, 0.3116, 0.3400],
          [0.3115, 0.3884, 0.4033, 0.3244],
          [0.2404, 0.3495, 0.3229, 0.3724]],
         [[0.2346, 0.3050, 0.2754, 0.3150],
          [0.3343, 0.3074, 0.3057, 0.3015],
          [0.3142, 0.2965, 0.2974, 0.3197],
          [0.3534, 0.3040, 0.3007, 0.2573]],
         [[0.3631, 0.3725, 0.3505, 0.4007],
          [0.3632, 0.4076, 0.3827, 0.3585],
          [0.3743, 0.3151, 0.2993, 0.3559],
          [0.4061, 0.3465, 0.3764, 0.3702]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['-T-T\n', 'TTTT\n', 'T--T\n', 'T-T-']
prize_locations []
trap_locations [[0, 1], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 3], [3, 0], [3, 2]]
matrix_map [[[1. 0. 1. 0.]
  [0. 0. 0. 0.]
  [0. 1. 1. 0.]
  [0. 1. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 0. 1.]
  [1. 1. 1. 1.]
  [1. 0. 0. 1.]
  [1. 0. 1. 0.]]]
fake tensor([[[[0.3363, 0.2890, 0.2982, 0.3836],
          [0.3512, 0.3339, 0.3382, 0.3670],
          [0.3192, 0.3525, 0.3626, 0.2353],
          [0.2692, 0.4347, 0.3380, 0.3224]],
         [[0.2969, 0.3034, 0.3369, 0.2747],
          [0.3172, 0.2936, 0.3174, 0.3207],
          [0.3319, 0.2987, 0.2582, 0.3534],
          [0.3441, 0.2060, 0.2832, 0.2963]],
         [[0.3668, 0.4077, 0.3649, 0.3417],
          [0.3315, 0.3724, 0.3445, 0.3123],
          [0.3489, 0.3489, 0.3792, 0.4113],
          [0.3867, 0.3593, 0.3788, 0.3813]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTT-\n', '-TT-\n', 'T-TT\n', 'T-TT']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [2, 0], [2, 2], [2, 3], [3, 0], [3, 2], [3, 3]]
matrix_map [[[0. 0. 0. 1.]
  [1. 0. 0. 1.]
  [0. 1. 0. 0.]
  [0. 1. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 0.]
  [0. 1. 1. 0.]
  [1. 0. 1. 1.]
  [1. 0. 1. 1.]]]
fake tensor([[[[0.3318, 0.3003, 0.3106, 0.3146],
          [0.2877, 0.3164, 0.4175, 0.2645],
          [0.3771, 0.3296, 0.3108, 0.2991],
          [0.3428, 0.3384, 0.3876, 0.3876]],
         [[0.3288, 0.3188, 0.3200, 0.3265],
          [0.3044, 0.3047, 0.2603, 0.3388],
          [0.2925, 0.3155, 0.3074, 0.3202],
          [0.2697, 0.2388, 0.2795, 0.3049]],
         [[0.3394, 0.3809, 0.3695, 0.3589],
          [0.4079, 0.3790, 0.3222, 0.3967],
          [0.3304, 0.3549, 0.3817, 0.3808],
          [0.3875, 0.4228, 0.3329, 0.3075]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTTT\n', 'TT-T\n', '-TTT\n', 'TT--']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 3], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1]]
matrix_map [[[0. 0. 0. 0.]
  [0. 0. 1. 0.]
  [1. 0. 0. 0.]
  [0. 0. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 1.]
  [1. 1. 0. 1.]
  [0. 1. 1. 1.]
  [1. 1. 0. 0.]]]
fake tensor([[[[0.3252, 0.2983, 0.3186, 0.3498],
          [0.2656, 0.3486, 0.3043, 0.3254],
          [0.3364, 0.3068, 0.3659, 0.5165],
          [0.2746, 0.3259, 0.3448, 0.2894]],
         [[0.3072, 0.3130, 0.3303, 0.3065],
          [0.3230, 0.3138, 0.2887, 0.3251],
          [0.2823, 0.3105, 0.2704, 0.1907],
          [0.3364, 0.2873, 0.3230, 0.3537]],
         [[0.3676, 0.3887, 0.3511, 0.3438],
          [0.4114, 0.3375, 0.4071, 0.3495],
          [0.3813, 0.3828, 0.3637, 0.2928],
          [0.3891, 0.3867, 0.3321, 0.3570]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTT-\n', 'T-TT\n', 'TT--\n', 'TT-T']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [1, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 3]]
matrix_map [[[0. 0. 0. 1.]
  [0. 1. 0. 0.]
  [0. 0. 1. 1.]
  [0. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 0.]
  [1. 0. 1. 1.]
  [1. 1. 0. 0.]
  [1. 1. 0. 1.]]]
fake tensor([[[[0.3381, 0.2917, 0.3492, 0.3135],
          [0.3231, 0.3316, 0.2584, 0.3734],
          [0.2896, 0.3113, 0.4073, 0.3796],
          [0.3087, 0.3632, 0.3602, 0.3103]],
         [[0.3163, 0.3358, 0.2774, 0.3245],
          [0.3106, 0.3080, 0.3431, 0.3137],
          [0.3267, 0.2669, 0.2432, 0.2902],
          [0.3212, 0.2691, 0.2914, 0.2990]],
         [[0.3456, 0.3725, 0.3734, 0.3620],
          [0.3664, 0.3604, 0.3985, 0.3128],
          [0.3837, 0.4217, 0.3495, 0.3302],
          [0.3701, 0.3677, 0.3485, 0.3906]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTTT\n', 'TTT-\n', 'TT--\n', 'TT-T']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [3, 0], [3, 1], [3, 3]]
matrix_map [[[0. 0. 0. 0.]
  [0. 0. 0. 1.]
  [0. 0. 1. 1.]
  [0. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 1.]
  [1. 1. 1. 0.]
  [1. 1. 0. 0.]
  [1. 1. 0. 1.]]]
fake tensor([[[[0.3587, 0.4017, 0.3277, 0.3090],
          [0.3889, 0.2593, 0.3321, 0.3440],
          [0.4079, 0.3027, 0.4057, 0.3385],
          [0.3480, 0.2186, 0.2464, 0.3738]],
         [[0.2522, 0.2574, 0.3313, 0.3092],
          [0.2893, 0.3386, 0.3249, 0.3234],
          [0.2375, 0.3249, 0.2814, 0.2819],
          [0.2927, 0.3667, 0.3269, 0.2633]],
         [[0.3891, 0.3409, 0.3410, 0.3818],
          [0.3217, 0.4021, 0.3431, 0.3326],
          [0.3545, 0.3724, 0.3129, 0.3796],
          [0.3593, 0.4147, 0.4267, 0.3629]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T-TT\n', '-TT-\n', '-T-T\n', 'TTT-']
prize_locations []
trap_locations [[0, 0], [0, 2], [0, 3], [1, 1], [1, 2], [2, 1], [2, 3], [3, 0], [3, 1], [3, 2]]
matrix_map [[[0. 1. 0. 0.]
  [1. 0. 0. 1.]
  [1. 0. 1. 0.]
  [0. 0. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 1. 1.]
  [0. 1. 1. 0.]
  [0. 1. 0. 1.]
  [1. 1. 1. 0.]]]
fake tensor([[[[0.3065, 0.3378, 0.3465, 0.4331],
          [0.3355, 0.3576, 0.2797, 0.2881],
          [0.3589, 0.2259, 0.2494, 0.3104],
          [0.3783, 0.3528, 0.3431, 0.4311]],
         [[0.2864, 0.2715, 0.3231, 0.2548],
          [0.3160, 0.3095, 0.3472, 0.3109],
          [0.2446, 0.3526, 0.3606, 0.3215],
          [0.2572, 0.2855, 0.3358, 0.2552]],
         [[0.4071, 0.3907, 0.3304, 0.3120],
          [0.3485, 0.3328, 0.3732, 0.4009],
          [0.3965, 0.4215, 0.3900, 0.3681],
          [0.3645, 0.3618, 0.3210, 0.3137]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT--\n', 'T-TT\n', 'TTTT\n', '-T--']
prize_locations []
trap_locations [[0, 0], [0, 1], [1, 0], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 1]]
matrix_map [[[0. 0. 1. 1.]
  [0. 1. 0. 0.]
  [0. 0. 0. 0.]
  [1. 0. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 0.]
  [1. 0. 1. 1.]
  [1. 1. 1. 1.]
  [0. 1. 0. 0.]]]
generated_map tensor([[[[0.3279, 0.3271, 0.3292, 0.3337],
          [0.3282, 0.3306, 0.3261, 0.3250],
          [0.3276, 0.3257, 0.3261, 0.3269],
          [0.3306, 0.3276, 0.3302, 0.3329]],
         [[0.3023, 0.3041, 0.3047, 0.3020],
          [0.3052, 0.3033, 0.3058, 0.3057],
          [0.3026, 0.3062, 0.3064, 0.3058],
          [0.3016, 0.3041, 0.3048, 0.3021]],
         [[0.3697, 0.3688, 0.3661, 0.3643],
          [0.3666, 0.3660, 0.3681, 0.3693],
          [0.3697, 0.3681, 0.3675, 0.3673],
          [0.3678, 0.3683, 0.3650, 0.3650]]]])
coded_fake_map ['TTTT\n', 'TTTT\n', 'TTTT\n', 'TTTT']
ground_locations []
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]
fake tensor([[[[0.3670, 0.3195, 0.2806, 0.3178],
          [0.3512, 0.3335, 0.3086, 0.3308],
          [0.3125, 0.3138, 0.3868, 0.3300],
          [0.2802, 0.3066, 0.3683, 0.3966]],
         [[0.2814, 0.3310, 0.3138, 0.3133],
          [0.2756, 0.2880, 0.3294, 0.3027],
          [0.3187, 0.3211, 0.2571, 0.2772],
          [0.3243, 0.3329, 0.2715, 0.3017]],
         [[0.3516, 0.3495, 0.4056, 0.3689],
          [0.3732, 0.3786, 0.3621, 0.3665],
          [0.3688, 0.3651, 0.3560, 0.3929],
          [0.3955, 0.3605, 0.3602, 0.3017]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['-TTT\n', 'TTTT\n', 'TT-T\n', 'TT--']
prize_locations []
trap_locations [[0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 3], [3, 0], [3, 1]]
matrix_map [[[1. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 1. 0.]
  [0. 0. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 1. 1.]
  [1. 1. 1. 1.]
  [1. 1. 0. 1.]
  [1. 1. 0. 0.]]]
fake tensor([[[[0.2987, 0.3021, 0.4261, 0.3641],
          [0.3451, 0.3346, 0.3934, 0.3670],
          [0.3103, 0.2738, 0.2854, 0.2777],
          [0.2799, 0.3528, 0.3628, 0.3451]],
         [[0.3162, 0.3022, 0.2475, 0.2483],
          [0.3166, 0.2688, 0.2716, 0.3151],
          [0.2889, 0.3214, 0.3402, 0.3294],
          [0.3308, 0.3015, 0.3107, 0.3128]],
         [[0.3851, 0.3957, 0.3264, 0.3876],
          [0.3384, 0.3966, 0.3350, 0.3178],
          [0.4008, 0.4048, 0.3744, 0.3929],
          [0.3893, 0.3457, 0.3265, 0.3421]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT-T\n', '-T--\n', 'TTTT\n', 'T---']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 3], [1, 1], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0]]
matrix_map [[[0. 0. 1. 0.]
  [1. 0. 1. 1.]
  [0. 0. 0. 0.]
  [0. 1. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 1.]
  [0. 1. 0. 0.]
  [1. 1. 1. 1.]
  [1. 0. 0. 0.]]]
fake tensor([[[[0.3321, 0.3634, 0.2933, 0.2985],
          [0.4449, 0.3513, 0.3480, 0.3090],
          [0.3518, 0.3751, 0.2189, 0.3513],
          [0.3203, 0.3468, 0.2888, 0.3108]],
         [[0.3120, 0.2808, 0.3087, 0.3020],
          [0.2213, 0.3243, 0.2651, 0.2957],
          [0.3007, 0.2953, 0.3614, 0.3451],
          [0.2888, 0.2888, 0.3233, 0.3206]],
         [[0.3558, 0.3558, 0.3980, 0.3995],
          [0.3337, 0.3243, 0.3869, 0.3953],
          [0.3475, 0.3296, 0.4197, 0.3036],
          [0.3909, 0.3644, 0.3879, 0.3685]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T-TT\n', '--TT\n', '--T-\n', 'TTTT']
prize_locations []
trap_locations [[0, 0], [0, 2], [0, 3], [1, 2], [1, 3], [2, 2], [3, 0], [3, 1], [3, 2], [3, 3]]
matrix_map [[[0. 1. 0. 0.]
  [1. 1. 0. 0.]
  [1. 1. 0. 1.]
  [0. 0. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 1. 1.]
  [0. 0. 1. 1.]
  [0. 0. 1. 0.]
  [1. 1. 1. 1.]]]
fake tensor([[[[0.2424, 0.3500, 0.3537, 0.3190],
          [0.3232, 0.3672, 0.2890, 0.3653],
          [0.2526, 0.3098, 0.3692, 0.3577],
          [0.3866, 0.3991, 0.3155, 0.2954]],
         [[0.3615, 0.3162, 0.2867, 0.2723],
          [0.3199, 0.2910, 0.3287, 0.3065],
          [0.3375, 0.3366, 0.2898, 0.2909],
          [0.2790, 0.2391, 0.3273, 0.2635]],
         [[0.3961, 0.3338, 0.3596, 0.4087],
          [0.3569, 0.3418, 0.3822, 0.3281],
          [0.4099, 0.3536, 0.3410, 0.3514],
          [0.3344, 0.3617, 0.3572, 0.4410]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['T-TT\n', 'T-T-\n', 'TT--\n', '--TT']
prize_locations []
trap_locations [[0, 0], [0, 2], [0, 3], [1, 0], [1, 2], [2, 0], [2, 1], [3, 2], [3, 3]]
matrix_map [[[0. 1. 0. 0.]
  [0. 1. 0. 1.]
  [0. 0. 1. 1.]
  [1. 1. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 1. 1.]
  [1. 0. 1. 0.]
  [1. 1. 0. 0.]
  [0. 0. 1. 1.]]]
fake tensor([[[[0.2513, 0.3217, 0.3690, 0.2573],
          [0.3265, 0.3022, 0.3766, 0.3391],
          [0.3619, 0.4016, 0.4116, 0.3327],
          [0.3939, 0.3325, 0.2904, 0.2324]],
         [[0.3441, 0.3122, 0.3078, 0.3181],
          [0.2890, 0.3286, 0.2866, 0.2982],
          [0.3008, 0.2730, 0.2218, 0.3280],
          [0.2525, 0.3076, 0.3232, 0.3548]],
         [[0.4046, 0.3661, 0.3233, 0.4246],
          [0.3845, 0.3692, 0.3368, 0.3627],
          [0.3373, 0.3255, 0.3665, 0.3393],
          [0.3537, 0.3599, 0.3864, 0.4129]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT-T\n', 'TT-T\n', '---T\n', '-TTT']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 3], [1, 0], [1, 1], [1, 3], [2, 3], [3, 1], [3, 2], [3, 3]]
matrix_map [[[0. 0. 1. 0.]
  [0. 0. 1. 0.]
  [1. 1. 1. 0.]
  [1. 0. 0. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 1.]
  [1. 1. 0. 1.]
  [0. 0. 0. 1.]
  [0. 1. 1. 1.]]]
fake tensor([[[[0.3851, 0.4002, 0.2622, 0.3551],
          [0.2925, 0.3018, 0.4173, 0.3725],
          [0.3645, 0.2759, 0.3147, 0.3211],
          [0.2244, 0.3100, 0.3455, 0.3465]],
         [[0.2916, 0.2258, 0.3365, 0.2638],
          [0.3518, 0.3386, 0.2762, 0.2911],
          [0.2858, 0.3071, 0.3341, 0.2702],
          [0.3358, 0.3265, 0.2480, 0.3334]],
         [[0.3233, 0.3740, 0.4013, 0.3811],
          [0.3557, 0.3597, 0.3065, 0.3363],
          [0.3497, 0.4170, 0.3512, 0.4087],
          [0.4398, 0.3635, 0.4065, 0.3201]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['--TT\n', 'TT--\n', '-TTT\n', 'TTT-']
prize_locations []
trap_locations [[0, 2], [0, 3], [1, 0], [1, 1], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2]]
matrix_map [[[1. 1. 0. 0.]
  [0. 0. 1. 1.]
  [1. 0. 0. 0.]
  [0. 0. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 0. 1. 1.]
  [1. 1. 0. 0.]
  [0. 1. 1. 1.]
  [1. 1. 1. 0.]]]
fake tensor([[[[0.4075, 0.3441, 0.3049, 0.3305],
          [0.2461, 0.2753, 0.3136, 0.3988],
          [0.2914, 0.3832, 0.3274, 0.3284],
          [0.3355, 0.3113, 0.3582, 0.3519]],
         [[0.2853, 0.3115, 0.3332, 0.3281],
          [0.3389, 0.3202, 0.2873, 0.2859],
          [0.3123, 0.2328, 0.2978, 0.3038],
          [0.2814, 0.3206, 0.2930, 0.3165]],
         [[0.3072, 0.3444, 0.3619, 0.3414],
          [0.4150, 0.4045, 0.3991, 0.3152],
          [0.3964, 0.3839, 0.3749, 0.3678],
          [0.3830, 0.3682, 0.3487, 0.3317]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['-TTT\n', 'TTT-\n', 'TTTT\n', 'TT--']
prize_locations []
trap_locations [[0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1]]
matrix_map [[[1. 0. 0. 0.]
  [0. 0. 0. 1.]
  [0. 0. 0. 0.]
  [0. 0. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 1. 1.]
  [1. 1. 1. 0.]
  [1. 1. 1. 1.]
  [1. 1. 0. 0.]]]
fake tensor([[[[0.4053, 0.2882, 0.2774, 0.3074],
          [0.3795, 0.2878, 0.3676, 0.2079],
          [0.3190, 0.3877, 0.2596, 0.3526],
          [0.3391, 0.3719, 0.3577, 0.4120]],
         [[0.2940, 0.2984, 0.3529, 0.2872],
          [0.3237, 0.3483, 0.2713, 0.3571],
          [0.3377, 0.2278, 0.3395, 0.2552],
          [0.2998, 0.3106, 0.2665, 0.2515]],
         [[0.3008, 0.4134, 0.3697, 0.4055],
          [0.2968, 0.3639, 0.3611, 0.4350],
          [0.3433, 0.3844, 0.4009, 0.3922],
          [0.3611, 0.3175, 0.3758, 0.3365]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['-TTT\n', '-T-T\n', 'T-TT\n', 'T-T-']
prize_locations []
trap_locations [[0, 1], [0, 2], [0, 3], [1, 1], [1, 3], [2, 0], [2, 2], [2, 3], [3, 0], [3, 2]]
matrix_map [[[1. 0. 0. 0.]
  [1. 0. 1. 0.]
  [0. 1. 0. 0.]
  [0. 1. 0. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 1. 1.]
  [0. 1. 0. 1.]
  [1. 0. 1. 1.]
  [1. 0. 1. 0.]]]
fake tensor([[[[0.3514, 0.3463, 0.3778, 0.3423],
          [0.3484, 0.2875, 0.2724, 0.2719],
          [0.2619, 0.4311, 0.2237, 0.4594],
          [0.2813, 0.3448, 0.3782, 0.3383]],
         [[0.2866, 0.2443, 0.3067, 0.2970],
          [0.2902, 0.3473, 0.3449, 0.3513],
          [0.3440, 0.2261, 0.3512, 0.2409],
          [0.3554, 0.2779, 0.3115, 0.2936]],
         [[0.3620, 0.4094, 0.3156, 0.3607],
          [0.3614, 0.3651, 0.3827, 0.3768],
          [0.3941, 0.3428, 0.4251, 0.2998],
          [0.3633, 0.3773, 0.3103, 0.3681]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TT-T\n', 'TTTT\n', 'T-T-\n', 'TT-T']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 2], [3, 0], [3, 1], [3, 3]]
matrix_map [[[0. 0. 1. 0.]
  [0. 0. 0. 0.]
  [0. 1. 0. 1.]
  [0. 0. 1. 0.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 0. 1.]
  [1. 1. 1. 1.]
  [1. 0. 1. 0.]
  [1. 1. 0. 1.]]]
fake tensor([[[[0.2679, 0.3466, 0.3533, 0.3836],
          [0.2842, 0.3467, 0.2691, 0.3790],
          [0.2876, 0.4084, 0.2994, 0.4103],
          [0.2037, 0.3448, 0.3793, 0.3893]],
         [[0.3258, 0.3009, 0.2758, 0.3099],
          [0.3525, 0.3150, 0.3427, 0.2912],
          [0.3219, 0.2504, 0.2875, 0.2093],
          [0.3255, 0.3194, 0.3103, 0.2827]],
         [[0.4063, 0.3526, 0.3709, 0.3065],
          [0.3634, 0.3383, 0.3882, 0.3298],
          [0.3905, 0.3413, 0.4131, 0.3804],
          [0.4708, 0.3358, 0.3104, 0.3280]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['TTT-\n', 'T-T-\n', 'T-T-\n', 'T---']
prize_locations []
trap_locations [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 2], [3, 0]]
matrix_map [[[0. 0. 0. 1.]
  [0. 1. 0. 1.]
  [0. 1. 0. 1.]
  [0. 1. 1. 1.]]
 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[1. 1. 1. 0.]
  [1. 0. 1. 0.]
  [1. 0. 1. 0.]
  [1. 0. 0. 0.]]]
fake tensor([[[[0.3344, 0.3055, 0.3974, 0.3563],
          [0.2033, 0.3705, 0.3985, 0.3110],
          [0.3607, 0.2706, 0.3529, 0.3752],
          [0.3303, 0.3249, 0.2586, 0.3397]],
         [[0.3354, 0.2942, 0.2613, 0.3192],
          [0.3692, 0.3069, 0.2534, 0.3229],
          [0.2933, 0.3369, 0.3364, 0.2178],
          [0.2898, 0.3005, 0.3377, 0.2707]],
         [[0.3302, 0.4003, 0.3414, 0.3245],
          [0.4275, 0.3226, 0.3481, 0.3661],
          [0.3460, 0.3925, 0.3107, 0.4071],
          [0.3800, 0.3746, 0.4037, 0.3896]]]], grad_fn=<AddBackward0>)
opt.token_list ['-', 'R', 'T']
coded_fake_map ['RT--\n', 'T--T\n', '-T-T\n', 'TTTT']
prize_locations [[0, 0]]
trap_locations [[0, 1], [1, 0], [1, 3], [2, 1], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]
matrix_map [[[0. 0. 1. 1.]
  [0. 1. 1. 0.]
  [1. 0. 1. 0.]
  [0. 0. 0. 0.]]
 [[1. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]
 [[0. 1. 0. 0.]
  [1. 0. 0. 1.]
  [0. 1. 0. 1.]
  [1. 1. 1. 1.]]]
  0%|‚ñé                                                                               | 1/300 [00:04<21:21,  4.29s/it]
Traceback (most recent call last):
  File "main.py", line 93, in <module>
    main()
  File "main.py", line 74, in main
    generated_map = G.train(np.array(init_map), opt, i)
  File "/home/avsp/Masa√ºst√º/GansNRoses/GansNRoses/train.py", line 149, in train
    loss = test_score(idx)
  File "/home/avsp/Masa√ºst√º/GansNRoses/GansNRoses/train.py", line 33, in test_score
    model = A2C.load(f"./weights/trap_map_dqn_{idx+1}", env = env)
  File "/home/avsp/Masa√ºst√º/GansNRoses/GansNRoses/stable_baselines3/common/base_class.py", line 577, in load
    data, params, pytorch_variables = load_from_zip_file(path, device=device)
  File "/home/avsp/Masa√ºst√º/GansNRoses/GansNRoses/stable_baselines3/common/save_util.py", line 409, in load_from_zip_file
    th_object = th.load(file_content, map_location=device)
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 593, in load
    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 773, in _legacy_load
    result = unpickler.load()
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 729, in persistent_load
    deserialized_objects[root_key] = restore_location(obj, location)
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 811, in restore_location
    return default_restore_location(storage, str(map_location))
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 178, in default_restore_location
    result = fn(storage, location)
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/serialization.py", line 158, in _cuda_deserialize
    return storage_type(obj.size())
  File "/home/avsp/.local/lib/python3.6/site-packages/torch/cuda/__init__.py", line 433, in _lazy_new
    return super(_CudaBase, cls).__new__(cls, *args, **kwargs)
KeyboardInterrupt